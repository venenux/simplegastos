' Gambas class file

'' Código en gambas que emula un bean de java
'' Abstracción de todos los procesos en donde se requiere interactuar con bases de datos
'' ya sea sqlite, postgres, mariadb. mysql, ODBC 

'' objeto conexion : sqlite para desarrollo, servidor x para produccion, base de datos principal
Private $conexionserver As Connection
'' objeto conexcion db nomina via odbc u/o oasis
Private $conexionremota As Connection

'' objeto de configuracion de datos
Private $dbsettings As Settings


'' al instanciar la clase se ajusta y configura las conecciones
Public Sub _new(Optional produccion As Boolean = False)
  
  $dbsettings = New Settings(User.Home &/ ".config/simplegastos" &/ Application.Name & ".conf")
  If produccion Then
    dbnamedefault = "simplegastosdb"
  Else
    dbnamedefault = Application.Path &/ "../../sysgatosmisc/simplegastosdb.sq3"
  Endif
  
End



Private Function getConeccionDBgastos() As Connection
    
    Dim tipo As String = sqlite3
    
    tipo = $dbsettings["datoscentral/tipo", "sqlite3"]
    
        $conexionserver.Host = $dbsettings["datoscentral/host", ""]
        $conexionserver.Type = 
        $conexionserver.Name = $dbsettings["datoscentral/name", dbnamedefault]
    
                    $Con.Type = "[..../def/mysql]"       ' Type of connection
                $Con.Host = "localhost"   ' Name of the server
                $Con.Login = "root"       ' User's name for the connection
                $Con.Port = "3306"        ' Port to use in the connection, usually 3306
                $Con.Name = "Sophia"      ' Name of the database we want to use
                $Con.Password = "root123" ' User's password
    
    If Not IsNull($conexionserver) Then
        If Not $conexionserver.opened Then
            If Exist(databasename) Then
                $conexionserver.Open
            Else
                $conexionserver = Null
            Endif
        Endif
    Endif
    If IsNull($conexionserver) Then
        Print "Creando conexión a la Base de Datos..."
        $conexionserver = New Connection
        $conexionserver.Host = "" ' definimos directorio donde se encuentra la base de datos
        $conexionserver.Type = "sqlite3"
        If Exist(databasename) Then
            $conexionserver.Name = databasename
            $conexionserver.Open
             Print "Conexión a la Base de Datos fué establecida."
        Else
            Message.Error("Base de Datos no encontrada, revisar ruta: " & databasename)
        Endif
    Endif
    Return $conexionserver
    
End

Public Function getConexionodbc() As Connection
    
    If Not IsNull($conexionremota) Then
        
        $conexionremota.Type = "ODBC"
        $conexionremota.Name = "oasis0"
        $conexionremota.Host = "oasis0" 'el host esquivale al name
        $conexionremota.Login = "ordendespacho" 
        $conexionremota.Password = "ordendespacho.1. com"
        
    Endif
    If IsNull($conexionremota) Then
        Print "Creando conexión a la Base de Datos..."
        $conexionremota = New Connection
        $conexionremota.Type = "ODBC"
        $conexionremota.Name = "oasis0"
        $conexionremota.Host = "oasis0" 'el host esquivale al name
        $conexionremota.Login = "ordendespacho" 
        $conexionremota.Password = "ordendespacho.1. com"
        
    Endif
    $conexionremota.Open
    Return $conexionremota
    
End

'' Permite agregar el despacho a la tabla de despachos, retornoa un colleccion de las mismas lineas procesadas <br>
'' * fdespacho : la fecha del despacho<br>
'' * lineas: cuantos items tiene el grip a procesar<br>
'' * responsable: un nombre del que emite<br>
'' * turno: flag de sesion = sello+caja/ip3+fecha+ficha/cedula<br>
'' * matrix: objeto colleccion con las filas del grid o los datos de cada linea<br>
'' Datos de cada linea:<br>
'' * filagrid: la fila del grid que representa este elemento en el objeto collecion
'' * codigoprod codigo del producto con sus digitos hasta el 12
'' * origen codigo origen del despacho (sello)
'' * destino codigo destino del despacho (sello)
'' * precio el precio por ahora el que trae del grid NOTA debe incluir decimales con punto
'' * cuantos cuantos de este elemento
'' * cuantosque la tipo de unidad ejemplo bulto, paquete, reempaque
'' * reempaque si es o el tipo de reempaque
Public Function RegistrarOrdenDespacho(fdespacho As String, lineas As String, nombreresp As String, turno As String, matrixcontenido As Collection) As Collection
    
    Dim eldespacho, filasdeldespacho, matrixfilas As Collection
    Dim $datos As Result
    Dim filas, cantidaprocesados As Integer = 0
    Dim codigodespacho, codigoprod, fecharegistro, fechasalida, responsable, origen, destino, destinos, cuantos, cuantosque, precio, cambioprecio, reempaque As String = ""
    Dim tabla As Table
    $conexionserver = getConexionsqlite() 

    codigodespacho = Format$(Now, "yyyymmddhhnnss")
    fecharegistro = Format$(Now, "yyyymmddhhnnss")
    fechasalida = fdespacho
    cantidaprocesados = 0
    Error.Clear

    ' 1) ******** insertamos el despacho generados en tabla despachos
    $conexionserver.Begin
    eldespacho = New Collection
    For filas = 0 To (matrixcontenido.Count - 1)
        If matrixcontenido.Exist(filas) Then
            matrixfilas = matrixcontenido[filas]
            cantidaprocesados = matrixfilas["filagrid"] + 1   ' vamos con cada uno, al fina debe ser igual a lineas
            codigoprod = matrixfilas["codigoprod"]
            origen = matrixfilas["origen"]
            destino = matrixfilas["destino"]
            destinos = matrixfilas["destino"] & "|"
            precio = matrixfilas["precio"]
            cuantos = matrixfilas["cantidad"]
            cuantosque = matrixfilas["unidad"]
            reempaque = matrixfilas["reempaque"]
            ' modificación: si el sistema tiene alzheimer y no encuentra  la tabla habrá que crearla
             If Not $conexionserver.Tables.Exist("td_despacho") Then  ' preguntar, si no existe a crearla
               tabla = $conexionserver.Tables.Add("td_despacho")
                With tabla.Fields ' aqui se crea
                    .Add("codespacho", db.String, 64) 
                    .Add("codproducto", db.String, 64)
                    .Add("precio_origen", db.String, 64)
                    .Add("precio_destino", db.String, 64)
                    .Add("precio_venta", db.String, 64)
                    .Add("origen", db.String, 128) 
                    .Add("destino", db.String, 128)
                    .Add("tienda", db.String, 64)
                    .Add("unidad_tipo", db.String, 64)
                    .Add("unidad_cuanto", db.String, 64)
                    .Add("turno", db.String, 64)                            
                End With
               tabla.Update
                  If Error Then
                      Print "Error - no se puede corroborar la tabla verifique esto: " & Error.Code & " " & Error.Text
                 Else
                       Print "La tabla  td_despachos fue re-creada."
                  Endif
               Else
                   Print "La tabla  td_despachos existe... se procede a registrar despacho."
               Endif             
               
              '  sea que ya existia la tabla o fué creada, a registrar el despacho 
            $datos = $conexionserver.Create("td_despacho")
                $datos["codespacho"] = codigodespacho ' TEXT, - - codigo del despacho orden generada
                $datos["codproducto"] = codigoprod '  TEXT, - - producto despachando"
                $datos["precio_origen"] = precio ' TEXT, - - el precio de donde viene
                $datos["precio_destino"] = precio ' TEXT, - - el precio a donde se despacha(no es lo mismo al cual se vendera)
                $datos["precio_venta"] = precio ' TEXT, - - precio(si se desea)del lugar destino donde se vendera
                $datos["origen"] = origen ' TEXT, - - desde donde se despacha
                $datos["destino"] = destino ' TEXT, - - hacia donde se despacha
                $datos["tienda"] = destino ' TEXT, - - si se despacha a un secundario, y este se le desigan a donde enviara
                $datos["unidad_tipo"] = cuantosque ' TEXT, - - si bulto, empaque, peso, etc, por ahora guarda un string
                $datos["unidad_cuanto"] = cuantos ' TEXT - - cuantos de este tipo de empacado, o pesado etc
                $datos["turno"] = turno
            $datos.Update
            filasdeldespacho = New Collection
            filasdeldespacho.Add(codigodespacho, "codespacho")
            filasdeldespacho.Add(codigoprod, "codproducto")
            filasdeldespacho.Add(precio, "precio_origen")
            filasdeldespacho.Add(precio, "precio_destino")
            filasdeldespacho.Add(precio, "precio_venta")
            filasdeldespacho.Add(origen, "origen")
            filasdeldespacho.Add(destino, "destino")
            filasdeldespacho.Add(destino, "tienda")
            filasdeldespacho.Add(cuantosque, "unidad_tipo")
            filasdeldespacho.Add(cuantos, "unidad_cuanto")
            eldespacho.Add(filasdeldespacho, cantidaprocesados)
        Endif
    Next
    destinos = Mid$(destinos, 1, -1)
    $datos = $conexionserver.Create("tm_despacho")
        $datos["codespacho"] = codigodespacho ' TEXT, - - codigo del despacho orden generada
        $datos["codproducto"] = codigoprod '  TEXT, - - producto despachando"
        $datos["origen"] = origen ' TEXT, - - desde donde se despacha
        $datos["destino"] = destinos ' TEXT, - - aqui se coloca todos los destinos separados por "|"
        $datos["tienda"] = destinos ' TEXT, - - si se despacha a un secundario, y este se le desigan a donde enviara
        $datos["fechaemite"] = fecharegistro 'misa fecha turno pero incluye segundos y minutos
        $datos["fechaenvio"] = fechasalida '   -- xcuando este despacho debe salir
        $datos["turno"] = turno
    $datos.Update
    eldespacho.Add(codigodespacho, "codespacho")
    eldespacho.Add(origen, "origen")
    eldespacho.Add(destinos, "destinos")
    eldespacho.Add(destinos, "tienda")
    eldespacho.Add(fecharegistro, "fechaemite")
    eldespacho.Add(fechasalida, "fechaenvio")
    eldespacho.Add(turno, "turno")
    eldespacho.Add(cantidaprocesados, "procesados")
    $conexionserver.Commit  
    If Error Then
        eldespacho = Null
        $conexionserver.Rollback
    Endif
    If cantidaprocesados <> Val(lineas) Then
        eldespacho = Null
        $conexionserver.Rollback
    Endif
    $conexionserver.Close
    $conexionserver = Null 
    
    ' 2) ******** rescatamos el despacho generados en tabla despachos para presentarlo
    ' para que un select, ya devuelvo un objeto collecion completo con mucha info! menos ida a DB! uff!
    
    ' 3) ******** devolvemos todo el despacho generado en un objeto collecion recorrible
    Return eldespacho ' ????????????? 
End  


' ************** credenciales y datos de usuarios INICIO ******************************************

'' Devuelve una colección con los datos de un usuario, si hay una clave, devuelve si hay validez de estos y la clave, sino devuelve en resultado vacio/n<br>
'' objeto colleccion: siempre trae un elemento "resultado" si exitoso un numero, sino la palabra ERROR y un mensaje
''* ficha datos identificativo del usuario para los sistemas y respecto el pais que se ubica
''* intranet el usuario intranet o id de correo, si no lo posee solo entra al pos de cajero si tiene clave.
''* clave password o llave para proteger su acceso, debe siempre ser igual al de intranet
''* status valores permitiodos ACTIVO |CERRADO|VACACIONES, cuando este de vacaciones solo lee
''* session es un flag que implica ubicacion, fecha, y la ficha, este id se usa en cada transaccion.
''* accesos modulos de acciones, son excluyentes, si no lee no puede escribir ni crear, segun el form
''* ubicacion el sello de la tienda, formato: usa el tercer octeto de las direcciones de red
''* codger sigla ubicacion como se identifica en la nomina, se asocia al sello, solo de referencia
''* nombres datos identificativos del usuario legibles de forma humana
Public Function credenciales(Optional ulogin As String = "", Optional uclave As String = "", Optional ubicacion As String = "") As Collection
    Dim rsusuario As Result
    Dim index As Integer
    Dim item As String
    Dim query As String
    Dim resultados As Collection
    query = query & "select "    ' query de consulta de credenciales basado en usuario o clave
	query = query & "   count(*) as cuantos, "             '   calculo si hay duplicados
	query = query & "   ifnull(ficha, '') as ficha, "      '   obtengo su identificacion en nomina
	query = query & "   nombre, "                          '   sus datos como son y como le llaman
	query = query & "   ifnull(intranet,'') as intranet, " '   solo entran quienes tengan intranet
	query = query & "   clave, "                           '   la clave se compara vs la que ingresa claro
	query = query & "   ifnull(sessionflag,'') as sessionflag, " '   solo ingresa si ya inicio sesion o no hay sesiones abiertas
	query = query & "   ifnull(usu.status,'INACTIVO') as status, "  ' solo ingresa si esta activo o de vacaciones
   	query = query & "   acc_lectura, "    ' si el form o la web aparece aqui, accede, si login no aparece al menos, se sale
   	query = query & "   acc_escribe, "    ' si el form aparece aqui, solo accede al administrativo si puede escribir y leer
   	query = query & "   acc_modific, "    ' si el form aparece aqui, altera y administra si puede leer, escribir y modificar
   	query = query & "   ifnull(usu.cod_ubicacion,000) as usu_ubicacion, " ' si 000 no entra, en caso de administrativo solo entra si pertenece a oficina
   	query = query & "   ubi.cod_ubicacion as cod_ubicacion, "   ' que ubicacion es la del usuario y si es valida
   	query = query & "   ubi.txt_ubicacion as txt_ubicacion, "   ' como se llama esa ubicacion si es valida
   	query = query & "   usu.codger as codger, "   ' ubicacion segun la nomina
   	query = query & "   usu.codger as usu_codger, "   ' ubicacion segun la nomina del usuario para comparar
   	query = query & "   ubi.codger as ubi_codger, "   ' ubicacion segun la nomina dela entidad para comparar
   	query = query & "   ifnull(ubi.status,'INACTIVO') as ubi_status, " ' si la ubicacion esta inactiva en web no se permite cargar nomina por ejemplo
   	query = query & "   fechaultimavez "          ' ultima vez el usuario salio de sesion: YYYYMMDDhhmmss  
   	query = query & "from " 
   	query = query & "  td_usuarios as usu "
   	query = query & " left join  "                ' left join, asi me trae el usuario asi no tenga ubicacion, la interfaz debera saber que hacer
   	query = query & "  tm_entidades as ubi "
   	query = query & " on usu.cod_ubicacion = ubi.cod_ubicacion "
    query = query & "where usu.ficha <> '' AND ifnull(usu.ficha,'') <> ''"        'un where por defecto, solo usuarios que tengan documento ficha, sino es datos corruptos
   	' corroboro se pida usuario y clave, sino es una simple busqueda de cualquier usuario y sus datos
    If (Comp(ulogin, "", gb.IgnoreCase) <> 0 And Not IsNull(ulogin)) And (Comp(uclave, "", gb.IgnoreCase) <> 0 And Not IsNull(uclave)) Then
       	query = query & " AND ( "
       	query = query & " (usu.clave = '" & uclave & "' AND usu.ficha = '" & ulogin & "')  "
       	query = query & "OR  "
       	query = query & " (usu.clave = '" & uclave & "' AND usu.intranet = '" & ulogin & "')"
        query = query & ") "
    Else
        If Comp(ulogin, "", gb.IgnoreCase) <> 0 And Not IsNull(ulogin) Then
           	query = query & " AND ( usu.ficha = '" & ulogin & "' OR  usu.intranet = '" & ulogin & "' )" 
        Endif
    Endif
    If Comp(ubicacion, "", gb.IgnoreCase) <> 0 And Not IsNull(ulogin) Then
      	query = query & " AND usu.cod_ubicacion = '" & ubicacion & "'  "
    Endif
    rsusuario = $conexionserver.Exec(query)
    resultados = New Collection
    If rsusuario.Available Then
        For Each rsusuario
            resultados.Add(rsusuario!cuantos, "resultado")
            resultados.Add(rsusuario!ficha, "ficha")
            resultados.Add(rsusuario!intranet, "intranet")
            resultados.Add(rsusuario!nombre, "nombre")
            resultados.Add(rsusuario!clave, "clave")
            resultados.Add(rsusuario!sessionflag, "sessionflag")
            resultados.Add(rsusuario!status, "status")
            resultados.Add(rsusuario!acc_lectura, "acc_lectura")
            resultados.Add(rsusuario!acc_escribe, "acc_escribe")
            resultados.Add(rsusuario!acc_modific, "acc_modific")
            resultados.Add(rsusuario!usu_ubicacion, "usu_ubicacion")
            resultados.Add(rsusuario!cod_ubicacion, "cod_ubicacion")
            resultados.Add(rsusuario!txt_ubicacion, "txt_ubicacion")
            resultados.Add(rsusuario!codger, "codger")
            resultados.Add(rsusuario!usu_codger, "usu_codger")
            resultados.Add(rsusuario!ubi_codger, "ubi_codger")
            resultados.Add(rsusuario!ubi_status, "ubi_status")
            resultados.Add(rsusuario!fechaultimavez, "fechaultimavez")
            Break
        Next 
    Else
         resultados.Add("0", "resultado")
    Endif  
    Return resultados
Catch
    resultados = New Collection
        resultados.Add("Error: " & Error.Text, "resultado")
    Return resultados
End  
' ************** credenciales y datos de usuarios FIN ******************************************


''************************* mapeos: INICIO ******************* 

'' retorna una lista de ubicaciones en forma matrix colleccion x colleccion <br>/n
'' elementos cada elemento es una collecion y el indice es el cod_ubicacion <br>/n
'' cada colleccion contiene: cod_ubicacion, abr_ubicacion, txt_ubicacion, codger, status, fechamodifica
Public Function listarubicaciones(Optional filtroini As String = "", Optional codger As String = Null) As Collection
    
    Dim rsubicaciones As Result
    Dim index As Integer
    Dim item As Collection
    Dim query As String
    Dim resultados As Collection
   	query = "select " 
   	query = query & "  ifnull(cod_ubicacion, '000') as cod_ubicacion, " 
   	query = query & "  txt_ubicacion, abr_ubicacion, fechamodifica, " 
   	query = query & "  ifnull(codger, '') as codger, status "
   	query = query & "from tm_entidades "
   	query = query & "  where ifnull(status, '') <> '' and status <> ''"
    If Comp(filtroini, "", gb.IgnoreCase) <> 0 And Not IsNull(filtroini) Then
      	query = query & " AND cod_ubicacion = '" & filtroini & "'  "
    Endif
    If Comp(codger, "", gb.IgnoreCase) <> 0 And Not IsNull(codger) Then
      	query = query & " AND codger = '" & codger & "'  "
    Endif
    rsubicaciones = $conexionserver.Exec(query)
    resultados = New Collection
    If rsubicaciones.Available Then
        resultados.Add(rsubicaciones.Count, "resultado")
        For Each rsubicaciones
            item = New Collection
            item.Add(rsubicaciones!cod_ubicacion, "cod_ubicacion")
            item.Add(rsubicaciones!abr_ubicacion, "abr_ubicacion")
            item.Add(rsubicaciones!txt_ubicacion, "txt_ubicacion")
            item.Add(rsubicaciones!codger, "codger")
            item.Add(rsubicaciones!status, "status")
            item.Add(rsubicaciones!fechamodifica, "fechamodifica")
            resultados.Add(item, rsubicaciones!cod_ubicacion)
            item = Null
        Next
    Else
        resultados.Add(0, "resultado")
    Endif
   	Return resultados
Catch
    resultados = New Collection
        resultados.Add("Error: " & Error.Text, "resultado")
    Return resultados
End 


'' retorna una lista de conceptos en forma matrix colleccion x colleccion <br>/n
'' elementos cada elemento es una collecion y el indice es el cod_ubicacion <br>/n
'' cada colleccion contiene: cod_concepto, txt_descriptivo, fichasession, estatus, fechamodifica
Public Function listarconceptos(Optional tipo As String = "CAT", Optional filtro As String = Null) As Collection
    
    Dim rsconceptos As Result
    Dim index As Integer
    Dim item As Collection
    Dim query As String
    Dim resultados As Collection
   	query = "select count(*) as cuantos, " 
   	query = query & " ifnull(cod_concepto,'XXX99999999999999999') as cod_concepto, " '     -- codigo XXX#################[YYY#################]
   	query = query & " ifnull(txt_descriptivo,'sin_descripcion') as txt_descriptivo, " 
   	query = query & " ifnull(estatus, 'INVALIDO') as status, "
   	query = query & " ifnull(fichasession,'') as fichasession, fechamodifica "
   	query = query & "from td_conceptosgastos "
   	query = query & "  where ifnull(cod_concepto, '') <> '' and cod_concepto <> ''"
    If Comp(tipo, "", gb.IgnoreCase) <> 0 And Not IsNull(tipo) Then
      	query = query & " AND cod_concepto = '" & tipo & "'  "  ' TODO: hacer via base de datos un substring de CAT o SUB
    Endif
    If Comp(filtro, "", gb.IgnoreCase) <> 0 And Not IsNull(filtro) Then
      	query = query & " AND (cod_concepto like '" & filtro & "' "
    Endif
    rsconceptos = $conexionserver.Exec(query)
    resultados = New Collection
    If rsconceptos.Available Then
        resultados.Add(rsconceptos.Count, "resultado")
        For Each rsconceptos
            item = New Collection
            item.Add(rsconceptos!cod_concepto, "cod_concepto")
            item.Add(rsconceptos!txt_descriptivo, "txt_descriptivo")
            item.Add(rsconceptos!estatus, "estatus")
            item.Add(rsconceptos!fichasession, "fichasession")
            item.Add(rsconceptos!fechamodifica, "fechamodifica")
            resultados.Add(item, rsconceptos!cod_concepto)
            item = Null
        Next
    Else
        resultados.Add(0, "resultado")
    Endif
   	Return resultados
Catch
    resultados = New Collection
        resultados.Add("Error: " & Error.Text, "resultado")
    Return resultados
End 

''************************* mapeos: FIN ******************* 
