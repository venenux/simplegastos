' Gambas class file

'' Código en gambas que emula un bean de java
'' Abstracción de todos los procesos en donde se requiere interactuar con bases de datos
'' ya sea sqlite, postgres, mariadb. mysql, ODBC 

'' objeto conexion : sqlite para desarrollo, servidor x para produccion, base de datos principal
Private $conexionserver As Connection
'' objeto conexcion db nomina via odbc u/o oasis
Private $conexionremota As Connection
'' objeto de configuracion de datos
Private $dbsettings As Settings

Private dbtipo As String
Private dbnamedefault As String
Private dblogin As String
Private dbhost As String

Private produccion As Boolean = False


'' al instanciar la clase se ajusta y configura las conecciones y configuraciones por defecto
Public Sub _new(Optional esproduccion As Boolean = False)
    
    produccion = esproduccion       ' en desarrollo para trabajar independiente se usa sqlite e incluso se recrea la db
    If produccion Then
        $dbsettings = New Settings(User.Home &/ ".config/simplegastos" &/ Application.Name & ".conf")
        dbtipo = "mysql"
        dblogin = "root"
        dbhost = "localhost"
        dbnamedefault = "simplegastosdb"
    Else
        $dbsettings = New Settings(Application.Path &/ "../../sysgatosmisc/" &/ Application.Name & ".conf")
        dbtipo = "sqlite3"
        dblogin = ""
        dbhost = ""
        dbnamedefault = Application.Path &/ "../../sysgatosmisc/simplegastosdb.sq3"
    Endif
    
End

Public Function getConeccionDB() As Connection
    
    If IsNull($conexionserver) Then
        $conexionserver = New Connection
    Else
        If $conexionserver.opened Then          ' en modo produccion hay conexciones concurrentes, en desarrollo usamos sqlite
            $conexionserver.Close
        Endif
    Endif           ' primero veo si el objeto ya esta instanciado, solo cambiaremos su configuracion
    Error.Clear     ' despues aseguramos que el reportador de errores no este lleno de cosas
    $conexionserver.Host = $dbsettings["datoscentral/dbshost", dbhost]
    $conexionserver.Type = $dbsettings["datoscentral/dbstype", dbtipo]
    $conexionserver.Name = $dbsettings["datoscentral/dbsname", dbnamedefault]
    $conexionserver.Port = $dbsettings["datoscentral/dbsport"]
    $conexionserver.Login = $dbsettings["datoscentral/dbslogi", dblogin]
    $conexionserver.Password = $dbsettings["datoscentral/dbspass", ""]
    Try $conexionserver.Open
    If Error Then                               ' intentamos abrir una conexcion a la db
        If Error And produccion Then
            Return Null                         ' cualquier fallo se retorna nulo, sino la conexcion
        Else
            If Not Exist(dbnamedefault) Then    ' en caso no ser produccion, se intenta ver si la db sqlite existe
                $conexionserver.Name = ""
                Error.Clear
                Try $conexionserver.Open        ' en sqlite, se abre db de memoria, y se recrea una nueva
                If Not Error Then
                    $conexionserver.Databases.Add(dbnamedefault)
                    $conexionserver.Close       ' debemos cerrar porque la abierta es la de memoria
                    $conexionserver.Name = dbnamedefault
                    Try $conexionserver.Open    ' listo intntando abrir si es que no existia el archivo sqlite
                    If Error Then
                        Return Null
                    Endif
                Else
                    Return Null     ' en modo produccion, si no hay db, eso es problema del administrador, reportar
                Endif
            Endif
        Endif
    Else
        $dbsettings["datoscentral/dbshost"] = $conexionserver.Host
        $dbsettings["datoscentral/dbstype"] = $conexionserver.Type
        $dbsettings["datoscentral/dbsname"] = $conexionserver.Name
        $dbsettings["datoscentral/dbsport"] = $conexionserver.Port
        $dbsettings["datoscentral/dbslogi"] = $conexionserver.Login
        $dbsettings["datoscentral/dbspass"] = $conexionserver.Password
        $dbsettings.Save            ' nota, solo salva cambios, en modo produccion el archivo debe tener todo
    Endif
    Return $conexionserver
Catch
    Print "Error : " & Error.Where & " -*- " & Error.Text   ' en desarrollo sale en la consola y retorna null los errores
    Return Null
End



' ************** credenciales y datos de usuarios INICIO ******************************************

'' Devuelve una colección con los datos de un usuario, si hay una clave, devuelve si hay validez de estos y la clave, sino devuelve en resultado vacio/n<br>
'' objeto colleccion: siempre trae un elemento "resultado" si exitoso un numero, sino la palabra ERROR y un mensaje
''* ficha datos identificativo del usuario para los sistemas y respecto el pais que se ubica
''* intranet el usuario intranet o id de correo, si no lo posee solo entra al pos de cajero si tiene clave.
''* clave password o llave para proteger su acceso, debe siempre ser igual al de intranet
''* status valores permitiodos ACTIVO |CERRADO|VACACIONES, cuando este de vacaciones solo lee
''* session es un flag que implica ubicacion, fecha, y la ficha, este id se usa en cada transaccion.
''* accesos modulos de acciones, son excluyentes, si no lee no puede escribir ni crear, segun el form
''* ubicacion el sello de la tienda, formato: usa el tercer octeto de las direcciones de red
''* codger sigla ubicacion como se identifica en la nomina, se asocia al sello, solo de referencia
''* nombres datos identificativos del usuario legibles de forma humana
Public Function credenciales(Optional ulogin As String = "", Optional uclave As String = "", Optional ubicacion As String = "") As Collection

    Dim rsusuario As Result
    Dim index As Integer
    Dim item As String
    Dim query As String
    Dim resultados As Collection

    query = query & "select "    ' query de consulta de credenciales basado en usuario o clave
    query = query & "   count(*) as cuantos, "             '   calculo si hay duplicados
    query = query & "   ifnull(ficha, '') as ficha, "      '   obtengo su identificacion en nomina
    query = query & "   nombre, "                          '   sus datos como son y como le llaman
    query = query & "   ifnull(intranet,'') as intranet, " '   solo entran quienes tengan intranet
    query = query & "   clave, "                           '   la clave se compara vs la que ingresa claro
    query = query & "   ifnull(sessionflag,'') as sessionflag, " '   solo ingresa si ya inicio sesion o no hay sesiones abiertas
    query = query & "   ifnull(usu.status,'INACTIVO') as status, "  ' solo ingresa si esta activo o de vacaciones
    query = query & "   acc_lectura, "    ' si el form o la web aparece aqui, accede, si login no aparece al menos, se sale
    query = query & "   acc_escribe, "    ' si el form aparece aqui, solo accede al administrativo si puede escribir y leer
    query = query & "   acc_modific, "    ' si el form aparece aqui, altera y administra si puede leer, escribir y modificar
    query = query & "   ifnull(usu.cod_ubicacion,000) as usu_ubicacion, " ' si 000 no entra, en caso de administrativo solo entra si pertenece a oficina
    query = query & "   ubi.cod_ubicacion as cod_ubicacion, "   ' que ubicacion es la del usuario y si es valida
    query = query & "   ubi.txt_ubicacion as txt_ubicacion, "   ' como se llama esa ubicacion si es valida
    query = query & "   usu.codger as codger, "   ' ubicacion segun la nomina
    query = query & "   usu.codger as usu_codger, "   ' ubicacion segun la nomina del usuario para comparar
    query = query & "   ubi.codger as ubi_codger, "   ' ubicacion segun la nomina dela entidad para comparar
    query = query & "   ifnull(ubi.status,'INACTIVO') as ubi_status, " ' si la ubicacion esta inactiva en web no se permite cargar nomina por ejemplo
    query = query & "   fechaultimavez "          ' ultima vez el usuario salio de sesion: YYYYMMDDhhmmss  
    query = query & "from " 
    query = query & "  td_usuarios as usu "
    query = query & " left join  "                ' left join, asi me trae el usuario asi no tenga ubicacion, la interfaz debera saber que hacer
    query = query & "  tm_entidades as ubi "
    query = query & " on usu.cod_ubicacion = ubi.cod_ubicacion "
    query = query & "where usu.ficha <> '' AND ifnull(usu.ficha,'') <> ''"        'un where por defecto, solo usuarios que tengan documento ficha, sino es datos corruptos
    ' corroboro se pida usuario y clave, sino es una simple busqueda de cualquier usuario y sus datos
    If (Comp(ulogin, "", gb.IgnoreCase) <> 0 And Not IsNull(ulogin)) And (Comp(uclave, "", gb.IgnoreCase) <> 0 And Not IsNull(uclave)) Then
        query = query & " AND ( "
        query = query & " (usu.clave = '" & uclave & "' AND usu.ficha = '" & ulogin & "')  "
        query = query & "OR  "
        query = query & " (usu.clave = '" & uclave & "' AND usu.intranet = '" & ulogin & "')"
        query = query & ") "
    Else
        If Comp(ulogin, "", gb.IgnoreCase) <> 0 And Not IsNull(ulogin) Then
            query = query & " AND ( usu.ficha = '" & ulogin & "' OR  usu.intranet = '" & ulogin & "' )" 
        Endif
    Endif
    If Comp(ubicacion, "", gb.IgnoreCase) <> 0 And Not IsNull(ulogin) Then
        query = query & " AND usu.cod_ubicacion = '" & ubicacion & "'  "
    Endif
    rsusuario = $conexionserver.Exec(query)
    resultados = New Collection
    If rsusuario.Available Then
        For Each rsusuario
            resultados.Add(rsusuario!cuantos, "resultado")
            resultados.Add(rsusuario!ficha, "ficha")
            resultados.Add(rsusuario!intranet, "intranet")
            resultados.Add(rsusuario!nombre, "nombre")
            resultados.Add(rsusuario!clave, "clave")
            resultados.Add(rsusuario!sessionflag, "sessionflag")
            resultados.Add(rsusuario!status, "status")
            resultados.Add(rsusuario!acc_lectura, "acc_lectura")
            resultados.Add(rsusuario!acc_escribe, "acc_escribe")
            resultados.Add(rsusuario!acc_modific, "acc_modific")
            resultados.Add(rsusuario!usu_ubicacion, "usu_ubicacion")
            resultados.Add(rsusuario!cod_ubicacion, "cod_ubicacion")
            resultados.Add(rsusuario!txt_ubicacion, "txt_ubicacion")
            resultados.Add(rsusuario!codger, "codger")
            resultados.Add(rsusuario!usu_codger, "usu_codger")
            resultados.Add(rsusuario!ubi_codger, "ubi_codger")
            resultados.Add(rsusuario!ubi_status, "ubi_status")
            resultados.Add(rsusuario!fechaultimavez, "fechaultimavez")
            Break
        Next 
    Else
        resultados.Add("0", "resultado")
    Endif  
    Return resultados
Catch
    resultados = New Collection
    resultados.Add("Error: " & Error.Text, "resultado")
    Return resultados

End  
' ************** credenciales y datos de usuarios FIN ******************************************

''************************* mapeos: INICIO ******************* 

'' retorna una lista de ubicaciones en forma matrix colleccion x colleccion <br>/n
'' elementos cada elemento es una collecion y el indice es el cod_ubicacion <br>/n
'' cada colleccion contiene: cod_ubicacion, abr_ubicacion, txt_ubicacion, codger, status, fechamodifica
Public Function listarubicaciones(Optional filtroini As String = "", Optional codger As String = Null) As Collection
    
    Dim rsubicaciones As Result
    Dim index As Integer
    Dim item As Collection
    Dim query As String
    Dim resultados As Collection

    query = "select " 
    query = query & "  ifnull(cod_ubicacion, '000') as cod_ubicacion, " 
    query = query & "  txt_ubicacion, abr_ubicacion, fechamodifica, " 
    query = query & "  ifnull(codger, '') as codger, status "
    query = query & "from tm_entidades "
    query = query & "  where ifnull(status, '') <> '' and status <> ''"
    If Comp(filtroini, "", gb.IgnoreCase) <> 0 And Not IsNull(filtroini) Then
        query = query & " AND cod_ubicacion = '" & filtroini & "'  "
    Endif
    If Comp(codger, "", gb.IgnoreCase) <> 0 And Not IsNull(codger) Then
        query = query & " AND codger = '" & codger & "'  "
    Endif
    rsubicaciones = $conexionserver.Exec(query)
    resultados = New Collection
    If rsubicaciones.Available Then
        resultados.Add(rsubicaciones.Count, "resultado")
        For Each rsubicaciones
            item = New Collection
            item.Add(rsubicaciones!cod_ubicacion, "cod_ubicacion")
            item.Add(rsubicaciones!abr_ubicacion, "abr_ubicacion")
            item.Add(rsubicaciones!txt_ubicacion, "txt_ubicacion")
            item.Add(rsubicaciones!codger, "codger")
            item.Add(rsubicaciones!status, "status")
            item.Add(rsubicaciones!fechamodifica, "fechamodifica")
            resultados.Add(item, rsubicaciones!cod_ubicacion)
            item = Null
        Next
    Else
        resultados.Add(0, "resultado")
    Endif
    Return resultados
Catch
    resultados = New Collection
    resultados.Add("Error: " & Error.Text, "resultado")
    Return resultados

End 

'' retorna una lista de conceptos en forma matrix colleccion x colleccion <br>/n
'' elementos cada elemento es una collecion y el indice es el cod_ubicacion <br>/n
'' cada colleccion contiene: cod_concepto, txt_descriptivo, fichasession, estatus, fechamodifica
Public Function listarconceptos(Optional tipo As String = "CAT", Optional filtro As String = Null) As Collection
    
    Dim rsconceptos As Result
    Dim index As Integer
    Dim item As Collection
    Dim query As String
    Dim resultados As Collection

    query = "select count(*) as cuantos, " 
    query = query & " ifnull(cod_concepto,'XXX99999999999999999') as cod_concepto, " '     -- codigo XXX#################[YYY#################]
    query = query & " ifnull(txt_descriptivo,'sin_descripcion') as txt_descriptivo, " 
    query = query & " ifnull(estatus, 'INVALIDO') as status, "
    query = query & " ifnull(fichasession,'') as fichasession, fechamodifica "
    query = query & "from td_conceptosgastos "
    query = query & "  where ifnull(cod_concepto, '') <> '' and cod_concepto <> ''"
    If Comp(tipo, "", gb.IgnoreCase) <> 0 And Not IsNull(tipo) Then
        query = query & " AND cod_concepto = '" & tipo & "'  "  ' TODO: hacer via base de datos un substring de CAT o SUB
    Endif
    If Comp(filtro, "", gb.IgnoreCase) <> 0 And Not IsNull(filtro) Then
        query = query & " AND (cod_concepto like '" & filtro & "' "
    Endif
    rsconceptos = $conexionserver.Exec(query)
    resultados = New Collection
    If rsconceptos.Available Then
        resultados.Add(rsconceptos.Count, "resultado")
        For Each rsconceptos
            item = New Collection
            item.Add(rsconceptos!cod_concepto, "cod_concepto")
            item.Add(rsconceptos!txt_descriptivo, "txt_descriptivo")
            item.Add(rsconceptos!estatus, "estatus")
            item.Add(rsconceptos!fichasession, "fichasession")
            item.Add(rsconceptos!fechamodifica, "fechamodifica")
            resultados.Add(item, rsconceptos!cod_concepto)
            item = Null
        Next
    Else
        resultados.Add(0, "resultado")
    Endif
    Return resultados
Catch
    resultados = New Collection
    resultados.Add("Error: " & Error.Text, "resultado")
    Return resultados

End 

''************************* mapeos: FIN ******************* 
